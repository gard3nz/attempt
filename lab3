#include <iostream>
#include <set>
#include <vector>
#include <queue>
#include <stack>
#include <algorithm>
#include <list>
#include <string>
using namespace std;

int main()
{
////№1
//set<int>st;
//int size1; cin >> size1;
//for (int i=0; i<size1;i++){
//    int nu; cin >> nu;
//    st.insert(nu);
//}
//cout << "Uniq symbols: " << st.size();


//№2
//vector<int>vec;
//int size1; cin >> size1;
//for (int i=0; i<size1;i++){
//    int nu; cin >> nu;
//    vec.push_back(nu);
//}
//int count = 0;int x; cin >> x;
//for (int i=0; i<size1;i++){
//    if (vec[i]==x) count++;
//}
//cout << "Num of " << x << ": " << count;

//№3
//stack<int>st;
//int size1; cin >> size1;
//for (int i=0; i<size1;i++){
//    int nu; cin >> nu;
//    st.push(nu);
//}
//while (!st.empty()){
//       cout << st.top() << " ";
//       st.pop();
//}

//№4
//multiset<int>mst;
//int size1; cin >> size1;
//for (int i=0; i<size1;i++){
//    int nu; cin >> nu;
//    mst.insert(nu);
//}
//for (int i=0; i <= *mst.rbegin(); i++){
//    cout << i << ": " << mst.count(i) << endl;
//}

//№5
//vector<int>vec;
//int size1; cin >> size1;
//for (int i=0; i<size1;i++){
//    int nu; cin >> nu;
//    vec.push_back(nu);
//}
//int b; cin >> b;
//auto lam=[b](int c){return b<c;};
//auto result= find_if(begin(vec), end(vec), lam);
//if (result != vec.end()) {
//    cout << *result;
//}else cout << "Not Found!";

//№6
//vector<int>vec;
//int a;
//int size1; cin >> size1;
//for (int i=0; i<size1;i++){
//    int nu; cin >> nu;
//    vec.push_back(nu);
//}
//list<int>lsd;
//list<int>lsd2;
//for(int i =0;i<size1;i++){
//    if(vec[i]%2==0){
//        lsd.push_back(vec[i]);
//    }else{lsd2.push_back(vec[i]);}
//}
//lsd.splice(lsd.end(), lsd2);
//for (auto &l: lsd) cout << l << " ";


//#7
int k=0;
vector<int>vec;
int size1; cin >> size1;
for (int i=0; i<size1;i++){
    int nu; cin >> nu;
    vec.push_back(nu);
}
string stst;
int g=vec.size()-1;
for (int i = 0; i < vec.size(); i++){
    if (vec[i]==vec[g-i]) k++;
}
if(k==vec.size()) cout<<"yes";
else cout<<"no";
}
